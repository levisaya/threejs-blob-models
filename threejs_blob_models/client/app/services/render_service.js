// Generated by CoffeeScript 1.8.0
(function() {
  angular.module('threeJsBlobApp').factory('renderService', function() {
    var RenderService;
    return RenderService = (function() {
      function RenderService() {}

      RenderService.renderer = new THREE.WebGLRenderer();

      RenderService.renderer.gammaInput = true;

      RenderService.renderer.gammaOutput = true;

      RenderService.scene = new THREE.Scene();

      RenderService.camera = null;

      RenderService.elem = null;

      RenderService.resize = function() {
        var height, width;
        if (RenderService.elem != null) {
          width = $(RenderService.elem).width() - 10;
          height = $(RenderService.elem).height() - 10;
          if (RenderService.camera == null) {
            RenderService.camera = new THREE.PerspectiveCamera(50, width / height, 1, 2000);
            RenderService.camera.position.set(0, 0, 5);
          }
          RenderService.renderer.setSize(width, height);
          RenderService.camera.aspect = width / height;
          return RenderService.camera.updateProjectionMatrix();
        }
      };

      window.addEventListener('resize', RenderService.resize, false);

      RenderService.render_blob = function(blob) {
        var current_blob, geometry, lines, material, vertices;
        current_blob = RenderService.scene.getObjectByName('blob');
        if (current_blob != null) {
          RenderService.scene.remove(current_blob);
        }
        vertices = new Float32Array(blob);
        geometry = new THREE.BufferGeometry();
        geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));
        geometry.computeBoundingSphere();
        material = new THREE.LineBasicMaterial({
          color: 0xFF0000
        });
        lines = new THREE.Line(geometry, material, THREE.LinePieces);
        lines.name = 'blob';
        return RenderService.scene.add(lines);
      };

      RenderService.set_parent_elem = function(elem) {
        RenderService.elem = elem;
        RenderService.resize();
        return RenderService.renderer.domElement;
      };

      RenderService.animation_id = null;

      RenderService.cancel_render = function() {
        if (RenderService.animation_id) {
          cancelAnimationFrame(RenderService.animation_id);
        }
        return RenderService.animation_id = null;
      };

      RenderService.render = function() {
        var blob, time;
        time = Date.now() * 0.001;
        blob = RenderService.scene.getObjectByName('blob');
        blob.rotation.x = time * 0.25;
        blob.rotation.y = time * 0.5;
        return RenderService.renderer.render(RenderService.scene, RenderService.camera);
      };

      RenderService.start_render = function() {
        RenderService.animation_id = requestAnimationFrame(RenderService.start_render);
        return RenderService.render();
      };

      return RenderService;

    })();
  });

}).call(this);
